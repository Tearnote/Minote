#version 460
#pragma shader_stage(compute)

layout(local_size_x = 64) in;

#include "types.glsl"

layout(binding = 0) uniform InstanceCount {
	uvec4 u_instanceCount;
};
layout (binding = 1, std430) restrict readonly buffer BasicTransforms {
	BasicTransform b_basicTransforms[];
};
layout (binding = 2, std430) restrict writeonly buffer Transforms {
	mat3x4 b_transforms[];
};
layout (binding = 3, std430) restrict readonly buffer Instances {
	Instance b_instances[];
};
layout(binding = 4, std430) restrict readonly buffer Meshes {
	Mesh b_meshes[];
};

void main() {
	
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= u_instanceCount.w)
		return;
	
	mat4 transform = encodeTransform(b_basicTransforms[gid]);
	uint meshIdx = b_instances[gid].meshIdx;
	mat4 meshTransform = b_meshes[meshIdx].transform;
	
	b_transforms[gid] = mat3x4(transpose(transform * meshTransform));
	
}
