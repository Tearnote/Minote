#version 460
#pragma shader_stage(compute)
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_shuffle: enable
#extension GL_KHR_shader_subgroup_clustered: enable
#extension GL_KHR_shader_subgroup_quad: enable

layout(local_size_x = 1, local_size_y = 8, local_size_z = 8) in;

#include "sky/skyAccess.glsl"
#include "visibilityTypes.glsl"
#include "visibility.glsl"
#include "constants.glsl"
#include "types.glsl"
#include "util.glsl"

#define B_INDICES b_indices
#define B_VERTICES b_vertices
#define B_NORMALS b_normals
#define B_COLORS b_vtxColors

layout(binding = 0) uniform WorldConstants {
	World u_world;
};

layout (binding = 1, std430) restrict readonly buffer Descriptors {
	MeshDescriptor b_descriptors[];
};
layout (binding = 2, std430) restrict readonly buffer Instances {
	Instance b_instances[];
};
layout (binding = 3, std430) restrict readonly buffer Colors {
	vec4 b_colors[];
};
layout(binding = 4, std430) restrict readonly buffer Transforms {
	mat3x4 b_transforms[];
};

layout (binding = 5, std430) restrict readonly buffer Indices {
	uint B_INDICES[];
};
layout (binding = 6, std430) restrict readonly buffer Vertices {
	float B_VERTICES[];
};
layout (binding = 7, std430) restrict readonly buffer Normals {
	float B_NORMALS[];
};
layout (binding = 8, std430) restrict readonly buffer VtxColors {
	uint B_COLORS[];
};
layout (binding = 9, std430) restrict readonly buffer Materials {
	Material b_materials[];
};

layout(binding = 10) uniform SunLuminance {
	vec3 u_sunLuminance;
};
layout(binding = 11) uniform samplerCube s_cubemap;
layout(binding = 12) uniform sampler3D s_aerialPerspective;

layout(binding = 13) uniform usampler2DMS s_visbuf;
layout(binding = 14) restrict writeonly uniform image2D i_target;
layout(binding = 15, std430) restrict readonly buffer TileLists {
	uint b_lists[];
};

layout(push_constant) uniform Constants {
	uvec3 u_aerialPerspectiveSize;
	uint u_tileOffset;
	uvec2 u_targetSize;
};

#include "typesAccess.glsl"

const float IBLMipCount = 8.0;

vec3 envBRDFApprox(vec3 _f0, float _NoV, float _roughness) {
	
	vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);
	vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);
	vec4 r = _roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * _NoV)) * r.x + r.y;
	vec2 ab = vec2(-1.04, 1.04) * a004 + r.zw;
	return _f0 * ab.x + ab.y;
	
}

float dApprox(float _roughness, float _RoL) {
	
	float a = _roughness * _roughness;
	float a2 = a * a;
	float rcp_a2 = 1.0 / a2;
	// 0.5 / ln(2), 0.275 / ln(2)
	float c = 0.72134752 * rcp_a2 + 0.39674113;
	return rcp_a2 * exp2(c*_RoL - c);
	
}

#define SUBSAMPLE_COUNT 8
#define K_MEANS_ITERATIONS 4

const uvec2 TileSize = gl_WorkGroupSize.yz;
const uvec2 QuadsInTile = TileSize / 2;

const vec2 SubsampleLocations[SUBSAMPLE_COUNT] = {
	{0.5625, 0.3125},
	{0.4375, 0.6875},
	{0.8125, 0.5625},
	{0.3125, 0.1875},
	{0.1875, 0.8125},
	{0.0625, 0.4375},
	{0.6875, 0.9375},
	{0.9375, 0.0625}};

void main() {
	
	uint subId = gl_SubgroupInvocationID + gl_SubgroupID * gl_NumSubgroups;
	uint quadId = subId / 4;
	uvec2 quadOffset = uvec2(quadId % QuadsInTile.x, quadId / QuadsInTile.x) * 2;
	
	uint interQuadId = subId % 4;
	uvec2 interQuadOffset = {interQuadId % 2, interQuadId / 2};
	
	uvec2 lid = quadOffset + interQuadOffset;
	
	// Retrieve tile
	
	uint tileIdx = gl_GlobalInvocationID.x;
	uint tilePacked = b_lists[u_tileOffset + tileIdx];
	uvec2 tile = u16Fromu32(tilePacked);
	uvec2 tileOffset = tile * TileSize;
	
	uvec2 quadGid = tileOffset + quadOffset;
	uvec2 gid = tileOffset + lid;
	
	// Count unique samples in the quad
	
	uint clusterValue = -2u;
	uint clusterValueFreq = 0;
	bool randomize = false;
	for (uint i = 0; i < 4 * SUBSAMPLE_COUNT; i += 1) {
		
		uint subsampleIdx = i % SUBSAMPLE_COUNT;
		uint quadPx = i / SUBSAMPLE_COUNT;
		uvec2 quadPxOffset = {quadPx % 2, quadPx / 2};
		
		uint subsample;
		
		// Read sample
		
		if (interQuadId == 0)
			subsample = texelFetch(s_visbuf, ivec2(quadGid + quadPxOffset), int(subsampleIdx)).x;
		subsample = subgroupQuadBroadcast(subsample, 0);
		
		// If repeat, increment frequency
		
		if (clusterValue == subsample)
			clusterValueFreq += 1;
		
		// Check if value is unique
		
		bool valueFreeOrSame = clusterValue == -2u || clusterValue == subsample;
		uint vote = (valueFreeOrSame? 1u : 0u) << interQuadId;
		uint ballot = subgroupClusteredOr(vote, 4);
		
		if (clusterValue == -2u && (ballot & bitmask(interQuadId)) == 0) {
			
			clusterValue = subsample;
			clusterValueFreq = 1;
			
		}
		
		// Check if value is the 5th unique
		
		if (ballot == 0) {
			
			randomize = true;
			break;
			
		}
		
	}
	
	// Assign initial cluster values
	
	if (randomize) {
		
		uint initialSubsample = u_world.frameCounter % SUBSAMPLE_COUNT;
		clusterValue = texelFetch(s_visbuf, ivec2(quadGid + interQuadOffset), int(initialSubsample)).x;
		
	} else {
		
		uint highestFreq = subgroupClusteredMax(clusterValueFreq, 4);
		uint vote = (clusterValueFreq == highestFreq? 1u : 0u) << interQuadId;
		uint ballot = subgroupClusteredOr(vote, 4);
		uint interQuadIdWithHighestFreq = findLSB(ballot);
		uint highestFreqValue = subgroupQuadBroadcast(clusterValue, interQuadIdWithHighestFreq);
		
		if (clusterValue == -2u)
			clusterValue = highestFreqValue;
		
	}
	
	// Perform k-means clustering on quad subsamples
	
	vec2 clusterCentroid = vec2(interQuadOffset) + vec2(0.5);
	uint clusterSubsampleMask;
	
	for (uint i = 0; i < K_MEANS_ITERATIONS; i += 1) {
		
		vec2 newCentroid = vec2(0.0);
		clusterSubsampleMask = 0;
		
		for (uint subIdx = 0; subIdx < 4 * SUBSAMPLE_COUNT; subIdx += 1) {
			
			uint subsample = subIdx % SUBSAMPLE_COUNT;
			uint quadPx = subIdx / SUBSAMPLE_COUNT;
			uvec2 quadPxOffset = {quadPx % 2, quadPx / 2};
			
			vec2 subsamplePosition = vec2(quadPxOffset) + SubsampleLocations[subsample];
			uint subsampleValue = texelFetch(s_visbuf, ivec2(quadGid + quadPxOffset), int(subsample)).x;
			
			float dist2 = distanceSq(subsamplePosition, clusterCentroid);
			float primitiveBias = log2((clusterValue ^ subsampleValue) + 1);
			float dist = dist2 + primitiveBias;
			
			if (dist == subgroupClusteredMin(dist, 4)) {
				
				newCentroid += subsamplePosition;
				clusterSubsampleMask |= 1 << subIdx;
				
			}
			
		}
		
		clusterCentroid = newCentroid / float(bitCount(clusterSubsampleMask));
		
	}
	
	// Shade the cluster
	
	vec4 clusterResult = vec4(0.0);
	
	// Retrieve visibility sample
	
	if (clusterValue != -1u) { // Sky sample
		
		vec2 clusterUv = (vec2(quadGid) + clusterCentroid) / vec2(u_targetSize);
		VisSample vis = unpackVisibility(clusterValue);
		
		// Retrieve instance params
		
		Instance instance = b_instances[vis.instance];
		uint transformIdx = instance.transformIdx;
		mat4 transform = getTransform(b_transforms[transformIdx]);
		uint materialIdx = instance.materialIdx;
		Material material = b_materials[materialIdx];
		
		// Retrieve vertex indices
		
		uint meshIdx = instance.meshIdx;
		uint indexBase = b_descriptors[meshIdx].indexOffset;
		indexBase += vis.triangle * 3;
		uvec3 indices = fetchIndices(indexBase);
		
		// Retrieve vertex params
		
		uint vertexBase = b_descriptors[meshIdx].vertexOffset;
		indices += uvec3(vertexBase);
		
		mat3 vertices = {
			fetchVertex(indices.x),
			fetchVertex(indices.y),
			fetchVertex(indices.z)};
		
		mat3 normals = {
			fetchNormal(indices.x),
			fetchNormal(indices.y),
			fetchNormal(indices.z)};
		
		mat3x4 colors = {
			fetchColor(indices.x),
			fetchColor(indices.y),
			fetchColor(indices.z)};
		
		// Transform params from model to world space
		
		mat3 normTransform = mat3(inverse(transpose(transform)));
		
		for (uint i = 0; i < 3; i += 1) {
			
			vec4 transformed = transform * vec4(vertices[i], 1.0);
			vertices[i] = transformed.xyz / transformed.w;
			
			normals[i] = normalize(normTransform * normals[i]);
			
		}
		
		// Calculate world position and barycentrics
		
		vec3 clipSpace = vec3(clusterUv * vec2(2.0) - vec2(1.0), 0.0);
		vec3 worldDir = normalize(vec3(u_world.viewProjectionInverse * vec4(clipSpace, 1.0)));
		
		vec3 vertex;
		vec3 barycentrics;
		lineTriIntersection(vertex, barycentrics, u_world.cameraPos, worldDir, vertices);
		barycentrics = clampBarycentrics(barycentrics);
		
		vec4 clipVertexW = u_world.viewProjection * vec4(vertex, 1.0);
		vec3 clipVertex = clipVertexW.xyz / clipVertexW.w;
		
		// Interpolate params
		
		// vec3 normal = normalInterp(normals, barycentrics);
		vec3 normal = normalize(
			normals[0] * barycentrics.x +
			normals[1] * barycentrics.y +
			normals[2] * barycentrics.z);
		
		vec4 color =
			colors[0] * barycentrics.x +
			colors[1] * barycentrics.y +
			colors[2] * barycentrics.z;
		
		// Standard vectors
		
		vec3 viewDirection = normalize(u_world.cameraPos - vertex);
		float NoV = dot(normal, viewDirection);
		
		// Empirical sun visibility above the horizon
		
		float sunDot = dot(vec3(0.0, 0.0, 1.0), u_world.sunDirection);
		float sunAngularSize = radians(0.2);
		float sunsetStart = cos(radians(90.05) - sunAngularSize);
		float sunsetEnd = cos(radians(90.05) + sunAngularSize);
		float sunset = (sunDot - sunsetEnd) / (sunsetStart - sunsetEnd);
		sunset = clamp(sunset, 0.0, 1.0);
		sunset = (1.0 - cos(sunset * 1.57079633)) / 2.0;
		
		vec3 sunColor = u_sunLuminance * sunset;
		
		// PBR calculation
		
		uint colorIdx = instance.colorIdx;
		color *= b_colors[colorIdx];
		vec3 f0 = max(color.rgb * material.metalness, vec3(0.04));
		
		vec3 iblDiffuse = textureLod(s_cubemap, normal, IBLMipCount - 2.0).rgb;
		vec3 sunDiffuse = sunColor * max(dot(normal, u_world.sunDirection), 0.0);
		vec3 diffuse = color.rgb * (iblDiffuse + sunDiffuse) * (1.0 - material.metalness);
		
		vec3 reflection = reflect(viewDirection, normal);
		float iblMip = max(7.0 - 0.480898 * log(2.0 / pow(material.roughness, 4.0) - 1.0), 0.0);
		vec3 iblSpecular = vec3(textureLod(s_cubemap, -reflection, iblMip));
		float SunMinRoughness = 1.0 / 16.0;
		vec3 sunSpecular = sunColor * dApprox(max(material.roughness, SunMinRoughness), dot(-reflection, u_world.sunDirection));
		vec3 specular = iblSpecular + sunSpecular;
		
		vec3 surface = mix(diffuse, specular, envBRDFApprox(f0, NoV, material.roughness));
		
		// Aerial perspective
		
		float slice = aerialPerspectiveDepthToSlice(1.0 - clipVertex.z);
		float weight = 1.0;
		if (slice < 0.5) {
			
			// We multiply by weight to fade to 0 at depth 0. That works for luminance and opacity.
			weight = clamp(slice * 2.0, 0.0, 1.0);
			slice = 0.5;
			
		}
		float w = sqrt(slice / u_aerialPerspectiveSize.z);	// squared distribution
		
		vec3 ap = weight * textureLod(s_aerialPerspective, vec3(clusterUv, w), 0.0).xyz;
		
		// Result write
		
		clusterResult = vec4(surface + ap, 1.0);
		
	}
	
	// Blend cluster results for assigned pixel
	
	uint bitOffset = interQuadId * SUBSAMPLE_COUNT;
	float coverageStep = 1.0 / float(SUBSAMPLE_COUNT);
	
	vec4 pixelResult = vec4(0.0);
	for (uint i = 0; i < SUBSAMPLE_COUNT * 4; i += 1) {
		
		uint subsampleMask = 1u << i;
		uint clusterOwnsSubsample = ((subsampleMask & clusterSubsampleMask) != 0u)? 1u : 0u;
		uint vote = clusterOwnsSubsample << interQuadId;
		uint ballot = subgroupClusteredOr(vote, 4);
		uint clusterWithSubsample = findLSB(ballot) + (gl_SubgroupInvocationID & ~3u);
		vec4 value = subgroupShuffle(clusterResult, clusterWithSubsample);
		
		if (i / SUBSAMPLE_COUNT == interQuadId)
			pixelResult += vec4(tonemap(value.xyz) * coverageStep, value.a * coverageStep);
		
	}
	
	// Write to output
	
	if (pixelResult.a > 0.0)
		imageStore(i_target, ivec2(gid), vec4(tonemapInvert(pixelResult.rgb), pixelResult.a));
	
}
