#version 460
#pragma shader_stage(compute)

layout(local_size_x = 1, local_size_y = 64) in;

#include "instanceList/indices.glsl"
#include "visibility/visbufTypes.glsl"
#include "visibility/visbuf.glsl"
#include "sky/skyAccess.glsl"
#include "constants.glsl"
#include "types.glsl"
#include "util.glsl"

#define B_LISTS b_lists

layout(binding = 0) uniform WorldConstants {
	World u_world;
};

layout(binding = 1, std430) restrict readonly buffer Meshlets {
	Meshlet b_meshlets[];
};
layout(binding = 2, std430) restrict readonly buffer Indices {
	uint b_indices[];
};
layout(binding = 3, std430) restrict readonly buffer Instances {
	Instance b_instances[];
};
layout(binding = 4, std430) restrict readonly buffer Colors {
	float4 b_colors[];
};
layout(binding = 5, std430) restrict readonly buffer Materials {
	Material b_materials[];
};

layout(binding = 6) uniform SunLuminance {
	float3 u_sunLuminance;
};
layout(binding = 7) uniform samplerCube s_cubemap;
layout(binding = 8) uniform sampler3D s_aerialPerspective;

layout(binding = 9) uniform usampler2D s_visbuf;
layout(binding = 10) uniform sampler2D s_offset;
layout(binding = 11) uniform sampler2D s_depth;
layout(binding = 12) uniform usampler2D s_normal;
layout(binding = 13) restrict writeonly uniform image2D i_clusterOut;
layout(binding = 14, std430) restrict readonly buffer TileLists {
	uint B_LISTS[];
};

layout(constant_id = 0) const uint AerialPerspectiveSizeXYPacked = 0;
layout(constant_id = 1) const uint AerialPerspectiveSizeZ = 0;
layout(constant_id = 2) const uint TargetSizePacked = 0;
layout(constant_id = 3) const uint TileOffset = 0;

const uint3 AerialPerspectiveSize = uint3(U16FROMU32(AerialPerspectiveSizeXYPacked), AerialPerspectiveSizeZ);
const uint2 TargetSize = uint2(U16FROMU32(TargetSizePacked));

#include "typesAccess.glsl"
#include "visibility/worklist.glsl"

#define IBL_MIP_COUNT 8.0

float3 envBRDFApprox(float3 _f0, float _NoV, float _roughness) {
	
	float4 c0 = float4(-1.0, -0.0275, -0.572, 0.022);
	float4 c1 = float4(1.0, 0.0425, 1.04, -0.04);
	float4 r = _roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * _NoV)) * r.x + r.y;
	float2 ab = float2(-1.04, 1.04) * a004 + r.zw;
	return _f0 * ab.x + ab.y;
	
}

float dApprox(float _roughness, float _RoL) {
	
	float a = _roughness * _roughness;
	float a2 = a * a;
	float rcp_a2 = 1.0 / a2;
	// 0.5 / ln(2), 0.275 / ln(2)
	float c = 0.72134752 * rcp_a2 + 0.39674113;
	return rcp_a2 * exp2(c*_RoL - c);
	
}

float3 shadeVisSamplePBR(uint _visValue, float2 _uv, float3 _clipVertex, float3 _normal) {
	
	uint index = b_indices[_visValue * 3];
	uint instanceIdx = index >> INSTANCE_ID_BITS;
	Instance instance = b_instances[instanceIdx];
	uint meshletIdx = instance.meshletIdx;
	Meshlet meshlet = b_meshlets[meshletIdx];
	uint materialIdx = meshlet.materialIdx;
	Material material = b_materials[materialIdx];
	
	float4 vertexW = u_world.viewProjectionInverse * float4(_clipVertex, 1.0);
	float3 vertex = vertexW.xyz / vertexW.w;
	
	// Standard vectors
	
	float3 viewDirection = normalize(u_world.cameraPos - vertex);
	float NoV = dot(_normal, viewDirection);
	
	// Empirical sun visibility above the horizon
	
	const float sunAngularSize = radians(0.2);
	const float sunsetStart = cos(radians(90.05) - sunAngularSize);
	const float sunsetEnd = cos(radians(90.05) + sunAngularSize);
	
	float sunDot = dot(float3(0.0, 0.0, 1.0), u_world.sunDirection);
	float sunset = (sunDot - sunsetEnd) / (sunsetStart - sunsetEnd);
	sunset = clamp(sunset, 0.0, 1.0);
	sunset = (1.0 - cos(sunset * 1.57079633)) / 2.0;
	
	float3 sunColor = u_sunLuminance * sunset;
	
	// PBR calculation
	
	uint colorIdx = instance.objectIdx;
	float3 color = b_colors[colorIdx].rgb * material.color.rgb;
	float3 f0 = max(color * material.metalness, float3(0.04));
	
	float3 iblDiffuse = textureLod(s_cubemap, _normal, IBL_MIP_COUNT - 2.0).rgb;
	float3 sunDiffuse = sunColor * max(dot(_normal, u_world.sunDirection), 0.0);
	float3 diffuse = color * (iblDiffuse + sunDiffuse) * (1.0 - material.metalness);
	
	float3 reflection = reflect(viewDirection, _normal);
	float iblMip = max(7.0 - 0.480898 * log(2.0 / pow(material.roughness, 4.0) - 1.0), 0.0);
	float3 iblSpecular = float3(textureLod(s_cubemap, -reflection, iblMip));
	float SunMinRoughness = 1.0 / 16.0;
	float3 sunSpecular = sunColor * dApprox(max(material.roughness, SunMinRoughness), dot(-reflection, u_world.sunDirection));
	float3 specular = iblSpecular + sunSpecular;
	
	float3 surface = mix(diffuse, specular, envBRDFApprox(f0, NoV, material.roughness));
	
	// Aerial perspective
	
	float slice = aerialPerspectiveDepthToSlice(_clipVertex.z);
	float weight = 1.0;
	if (slice < 0.5) {
		
		// We multiply by weight to fade to 0 at depth 0. That works for luminance and opacity.
		weight = clamp(slice * 2.0, 0.0, 1.0);
		slice = 0.5;
		
	}
	float w = sqrt(slice / AerialPerspectiveSize.z); // squared distribution
	
	float3 ap = weight * textureLod(s_aerialPerspective, float3(_uv, w), 0.0).xyz;
	
	// Emissive lighting
	
	float3 emissive = material.emissive * 8.0;
	
	// Result write
	
	return surface + ap + emissive;
	
}

void main() {
	
	uint2 lid = mortonOrder(gl_LocalInvocationID.y);
	uint2 gid = getTileGid(gl_WorkGroupID.x, TileOffset) + lid;
	
	// Retrieve cluster data
	
	uint visbuf;
	if (all(lessThan(gid, TargetSize)))
		visbuf = texelFetch(s_visbuf, int2(gid), 0).x;
	else
		visbuf = -1u;
	
	// Shade the cluster
	
	float3 clusterResult;
	if (visbuf != -1u) {
		
		float2 clusterCentroid = texelFetch(s_offset, int2(gid), 0).xy * 2.0;
		
		float depth = texelFetch(s_depth, int2(gid), 0).x;
		float2 clusterPos = float2(gid & ~1u) + clusterCentroid;
		float2 screenUv = clusterPos / float2(TargetSize);
		float3 clipPos = float3(screenUv * 2.0 - 1.0, depth);
		
		uint normalOct = texelFetch(s_normal, int2(gid), 0).x;
		float3 normal = octDecode(normalOct);
		
		clusterResult = shadeVisSamplePBR(visbuf, screenUv, clipPos, normal);
		imageStore(i_clusterOut, int2(gid), float4(clusterResult, 1.0));
		
	}
	
}
