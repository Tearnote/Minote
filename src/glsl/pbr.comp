#version 460
#pragma shader_stage(compute)

layout(local_size_x = 1, local_size_y = 64) in;

#include "sky/skyAccess.glsl"
#include "visibilityTypes.glsl"
#include "visibility.glsl"
#include "constants.glsl"
#include "types.glsl"
#include "quad.glsl"
#include "util.glsl"

#define B_INDICES b_indices
#define B_VERTICES b_vertices
#define B_LISTS b_lists

layout(binding = 0) uniform WorldConstants {
	World u_world;
};

layout (binding = 1, std430) restrict readonly buffer Meshes {
	Mesh b_meshes[];
};
layout (binding = 2, std430) restrict readonly buffer Instances {
	Instance b_instances[];
};
layout (binding = 3, std430) restrict readonly buffer Colors {
	vec4 b_colors[];
};
layout(binding = 4, std430) restrict readonly buffer Transforms {
	mat3x4 b_transforms[];
};

layout (binding = 5, std430) restrict readonly buffer Indices {
	uint B_INDICES[];
};
layout (binding = 6, std430) restrict readonly buffer Vertices {
	float B_VERTICES[];
};
layout (binding = 7, std430) restrict readonly buffer Materials {
	Material b_materials[];
};

layout(binding = 8) uniform SunLuminance {
	vec3 u_sunLuminance;
};
layout(binding = 9) uniform samplerCube s_cubemap;
layout(binding = 10) uniform sampler3D s_aerialPerspective;

layout(binding = 11) uniform usampler2D s_visbuf;
layout(binding = 12) uniform sampler2D s_offset;
layout(binding = 13) uniform usampler2D s_normal;
layout(binding = 14) restrict writeonly uniform image2D i_clusterOut;
layout(binding = 15, std430) restrict readonly buffer TileLists {
	uint B_LISTS[];
};

layout(constant_id = 0) const uint AerialPerspectiveSizeXYPacked = 0;
layout(constant_id = 1) const uint AerialPerspectiveSizeZ = 0;
layout(constant_id = 2) const uint TargetSizePacked = 0;
layout(constant_id = 3) const uint TileOffset = 0;

const uvec3 AerialPerspectiveSize = uvec3(U16FROMU32(AerialPerspectiveSizeXYPacked), AerialPerspectiveSizeZ);
const uvec2 TargetSize = uvec2(U16FROMU32(TargetSizePacked));

#include "typesAccess.glsl"
#include "worklist.glsl"

#define USE_ACCURATE_NORMAL_INTERPOLATION 0
#define IBL_MIP_COUNT 8.0

void getInstanceVertexParams(out vec3 _vertex,
	Instance _instance, Mesh _mesh, uint _triangleIdx, vec2 _uv) {
	
	// Retrieve vertex indices
	
	uint indexBase = _mesh.indexOffset;
	indexBase += _triangleIdx * 3;
	uvec3 indices = fetchIndices(indexBase);
	
	// Retrieve vertex params
	
	uint transformIdx = _instance.transformIdx;
	mat4 transform = getTransform(b_transforms[transformIdx]);
	
	mat3 vertices = {
		fetchVertex(indices.x),
		fetchVertex(indices.y),
		fetchVertex(indices.z) };
	
	// Calculate barycentrics
	
	mat4 ndcTransform = u_world.viewProjection * transform;
	mat3x4 verticesNDC = {
		ndcTransform * vec4(vertices[0], 1.0),
		ndcTransform * vec4(vertices[1], 1.0),
		ndcTransform * vec4(vertices[2], 1.0) };
	
	vec3 barycentrics = calculateBarycentrics(verticesNDC, _uv * 2.0 - 1.0);
	// barycentrics = clampBarycentrics(barycentrics);
	
	// Interpolate params
	
	_vertex =
		vertices[0] * barycentrics.x +
		vertices[1] * barycentrics.y +
		vertices[2] * barycentrics.z;
	vec4 vertexW = transform * vec4(_vertex, 1.0);
	_vertex = vertexW.xyz / vertexW.w;
	
}

vec3 envBRDFApprox(vec3 _f0, float _NoV, float _roughness) {
	
	vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);
	vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);
	vec4 r = _roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * _NoV)) * r.x + r.y;
	vec2 ab = vec2(-1.04, 1.04) * a004 + r.zw;
	return _f0 * ab.x + ab.y;
	
}

float dApprox(float _roughness, float _RoL) {
	
	float a = _roughness * _roughness;
	float a2 = a * a;
	float rcp_a2 = 1.0 / a2;
	// 0.5 / ln(2), 0.275 / ln(2)
	float c = 0.72134752 * rcp_a2 + 0.39674113;
	return rcp_a2 * exp2(c*_RoL - c);
	
}

vec3 shadeVisSamplePBR(uint _visValue, vec2 _screenPos, vec3 _normal) {
	
	vec2 sampleUv = _screenPos / vec2(TargetSize);
	VisSample vis = unpackVisibility(_visValue);
	
	Instance instance = b_instances[vis.instance];
	uint meshIdx = instance.meshIdx;
	Mesh mesh = b_meshes[meshIdx];
	uint materialIdx = mesh.materialIdx;
	Material material = b_materials[materialIdx];
	
	vec3 vertex;
	getInstanceVertexParams(vertex, instance, mesh, vis.triangle, sampleUv);
	
	vec4 clipVertexW = u_world.viewProjection * vec4(vertex, 1.0);
	vec3 clipVertex = clipVertexW.xyz / clipVertexW.w;
	
	// Standard vectors
	
	vec3 viewDirection = normalize(u_world.cameraPos - vertex);
	float NoV = dot(_normal, viewDirection);
	
	// Empirical sun visibility above the horizon
	
	const float sunAngularSize = radians(0.2);
	const float sunsetStart = cos(radians(90.05) - sunAngularSize);
	const float sunsetEnd = cos(radians(90.05) + sunAngularSize);
	
	float sunDot = dot(vec3(0.0, 0.0, 1.0), u_world.sunDirection);
	float sunset = (sunDot - sunsetEnd) / (sunsetStart - sunsetEnd);
	sunset = clamp(sunset, 0.0, 1.0);
	sunset = (1.0 - cos(sunset * 1.57079633)) / 2.0;
	
	vec3 sunColor = u_sunLuminance * sunset;
	
	// PBR calculation
	
	uint colorIdx = instance.transformIdx;
	vec3 color = b_colors[colorIdx].rgb * material.color.rgb;
	vec3 f0 = max(color * material.metalness, vec3(0.04));
	
	vec3 iblDiffuse = textureLod(s_cubemap, _normal, IBL_MIP_COUNT - 2.0).rgb;
	vec3 sunDiffuse = sunColor * max(dot(_normal, u_world.sunDirection), 0.0);
	vec3 diffuse = color * (iblDiffuse + sunDiffuse) * (1.0 - material.metalness);
	
	vec3 reflection = reflect(viewDirection, _normal);
	float iblMip = max(7.0 - 0.480898 * log(2.0 / pow(material.roughness, 4.0) - 1.0), 0.0);
	vec3 iblSpecular = vec3(textureLod(s_cubemap, -reflection, iblMip));
	float SunMinRoughness = 1.0 / 16.0;
	vec3 sunSpecular = sunColor * dApprox(max(material.roughness, SunMinRoughness), dot(-reflection, u_world.sunDirection));
	vec3 specular = iblSpecular + sunSpecular;
	
	vec3 surface = mix(diffuse, specular, envBRDFApprox(f0, NoV, material.roughness));
	
	// Aerial perspective
	
	float slice = aerialPerspectiveDepthToSlice(clipVertex.z);
	float weight = 1.0;
	if (slice < 0.5) {
		
		// We multiply by weight to fade to 0 at depth 0. That works for luminance and opacity.
		weight = clamp(slice * 2.0, 0.0, 1.0);
		slice = 0.5;
		
	}
	float w = sqrt(slice / AerialPerspectiveSize.z); // squared distribution
	
	vec3 ap = weight * textureLod(s_aerialPerspective, vec3(sampleUv, w), 0.0).xyz;
	
	// Emissive lighting
	
	vec3 emissive = material.emissive * 8.0;
	
	// Result write
	
	return surface + ap + emissive;
	
}

void main() {
	
	uvec2 lid = mortonOrder(gl_LocalInvocationID.y);
	uvec2 gid = getTileGid(gl_WorkGroupID.x, TileOffset) + lid;
	
	// Retrieve cluster data
	
	uint visbuf;
	if (all(lessThan(gid, TargetSize)))
		visbuf = texelFetch(s_visbuf, ivec2(gid), 0).x;
	else
		visbuf = -1u;
	
	// Shade the cluster
	
	vec3 clusterResult;
	if (visbuf != -1u) {
		
		vec2 clusterCentroid = texelFetch(s_offset, ivec2(gid), 0).xy * 2.0;
		uint normalOct = texelFetch(s_normal, ivec2(gid), 0).x;
		vec3 normal = octDecode(normalOct);
		clusterResult = shadeVisSamplePBR(visbuf, vec2(gid & ~1u) + clusterCentroid, normal);
		imageStore(i_clusterOut, ivec2(gid), vec4(clusterResult, 1.0));
		
	}
	
}
