#version 460
#pragma shader_stage(compute)

layout(local_size_x = 1, local_size_y = 8, local_size_z = 8) in;

#include "skyTypes.glsl"
#include "../types.glsl"
#include "../util.glsl"

#define U_ATMO u_atmo
#define S_TRANSMITTANCE s_transmittance

layout(binding = 0) uniform WorldConstants {
	World u_world;
};
layout(binding = 1) uniform Atmosphere {
	AtmosphereParams U_ATMO;
};
layout(binding = 2) uniform sampler2D S_TRANSMITTANCE;
layout(binding = 3) uniform sampler2D s_skyView;
layout(binding = 4, std430) restrict readonly buffer TileLists {
	uint b_lists[];
};
layout(binding = 5) uniform sampler2D s_targetRead;
layout(binding = 6) writeonly uniform image2D i_target;

layout(constant_id = 0) const uint SkyViewSizePacked = 0;
layout(constant_id = 1) const uint TargetSizePacked = 0;
layout(constant_id = 2) const uint TileOffset = 0;

const uvec2 SkyViewSize = U16FROMU32(SkyViewSizePacked);
const uvec2 TargetSize = U16FROMU32(TargetSizePacked);

#include "sky.glsl"

void main() {
	
	// Retrieve tile
	
	uint tilePacked = b_lists[TileOffset + gl_GlobalInvocationID.x];
	uvec2 tile = u16Fromu32(tilePacked);
	
	// Bounds check
	
	uvec2 gid = tile * gl_WorkGroupSize.yz + gl_LocalInvocationID.yz;
	if (any(greaterThanEqual(gid, TargetSize)))
		return;
	
	// Retrieve pixel alpha
	
	vec4 pixel = texelFetch(s_targetRead, ivec2(gid), 0);
	if (pixel.a >= 1.0) // Not a sky sample
		return;
	
	vec2 gUv = vec2(gid) / vec2(TargetSize);
	vec3 clipSpace = vec3(gUv * vec2(2.0) - vec2(1.0), 0.0);
	vec4 hPos = u_world.viewProjectionInverse * vec4(clipSpace, 1.0);
	
	vec3 worldDir = normalize(hPos.xyz);
	vec3 worldPos = u_world.cameraPos + vec3(0.0, 0.0, u_atmo.bottomRadius);
	
	float viewHeight = length(worldPos);
	
	vec2 uv;
	vec3 upVector = normalize(worldPos);
	float viewZenithCosAngle = dot(worldDir, upVector);
	
	vec3 sideVector = normalize(cross(upVector, worldDir)); // assumes non parallel vectors
	vec3 forwardVector = normalize(cross(sideVector, upVector)); // aligns toward the sun light but perpendicular to up vector
	vec2 lightOnPlane = vec2(dot(u_world.sunDirection, forwardVector), dot(u_world.sunDirection, sideVector));
	lightOnPlane = normalize(lightOnPlane);
	float lightViewCosAngle = lightOnPlane.x;
	
	bool intersectGround = (raySphereIntersectNearest(worldPos, worldDir, vec3(0.0), u_atmo.bottomRadius) >= 0.0);
	
	skyViewLutParamsToUv(intersectGround, viewZenithCosAngle, lightViewCosAngle, SkyViewSize, viewHeight, uv, u_atmo.bottomRadius);
	vec3 skyView = textureLod(s_skyView, uv, 0.0).rgb;
	vec3 sun = getSunLuminance(worldPos, worldDir, u_world.sunDirection, u_world.sunIlluminance)
		* (120000.0 / u_world.sunIlluminance);
	
	// Blend the result
	
	vec3 pixelMapped = tonemapWithWeight(pixel.rgb, pixel.a);
	vec3 sky = skyView + sun;
	vec3 skyMapped = tonemapWithWeight(sky, 1.0 - pixel.a);
	vec4 result = vec4(tonemapInvert(pixelMapped + skyMapped), 1.0);
	imageStore(i_target, ivec2(gid), result);
	
}
