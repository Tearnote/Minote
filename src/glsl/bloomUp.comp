#version 460
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8) in;

#include "util.glsl"

layout(binding = 0) uniform sampler2D s_source;
layout(binding = 1) uniform sampler2D s_targetRead;
layout(binding = 2) writeonly uniform image2D i_target;

layout(constant_id = 0) const uint u_sourceSizePacked = 0;
layout(constant_id = 1) const uint u_targetSizePacked = 0;
const uvec2 u_sourceSize = U16FROMU32(u_sourceSizePacked);
const uvec2 u_targetSize = U16FROMU32(u_targetSizePacked);

layout(push_constant) uniform Constants {
	float u_power;
};

void main() {
	
	const uvec2 gid = gl_GlobalInvocationID.xy;
	const uvec2 lid = gl_LocalInvocationID.xy;
	
	if (any(greaterThanEqual(gid, u_targetSize)))
		return;
	
	vec2 uv = (vec2(gid) + vec2(0.5)) / vec2(u_targetSize);
	vec2 texel = vec2(1.0) / vec2(u_sourceSize);
	
	// Upscale fetches can't be cached in the same way as downscale
	vec4 current = texelFetch(s_targetRead, ivec2(gid), 0);
	vec4 result  = textureLod(s_source, uv,                            0.0) * (4.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x,      0.0), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x,      0.0), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(     0.0, -texel.y), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(     0.0,  texel.y), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x, -texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x, -texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x,  texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x,  texel.y), 0.0) * (1.0 / 16.0);
	
	imageStore(i_target, ivec2(gid), current + result * u_power);
	
}
