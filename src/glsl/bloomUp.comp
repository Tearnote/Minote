#version 460
#pragma shader_stage(compute)

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2D s_source;
layout(binding = 1, rgba16f) restrict uniform image2D i_target;

layout(push_constant) uniform Constants {
	float u_power;
};

void main() {
	
	const uvec2 gid = gl_GlobalInvocationID.xy;
	const uvec2 lid = gl_LocalInvocationID.xy;
	const ivec2 sourceSize = textureSize(s_source, 0);
	const ivec2 targetSize = imageSize(i_target);
	
	if (any(greaterThanEqual(gid, targetSize)))
		return;
	
	vec2 uv = (vec2(gid) + vec2(0.5)) / vec2(targetSize);
	vec2 texel = vec2(1.0) / vec2(sourceSize);
	
	vec4 current = imageLoad(i_target, ivec2(gid));
	vec4 result  = textureLod(s_source, uv,                            0.0) * (4.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x, 0.0     ), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x, 0.0     ), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(0.0,      -texel.y), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(0.0,       texel.y), 0.0) * (2.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x, -texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x, -texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2(-texel.x,  texel.y), 0.0) * (1.0 / 16.0);
	     result += textureLod(s_source, uv + vec2( texel.x,  texel.y), 0.0) * (1.0 / 16.0);
	
	imageStore(i_target, ivec2(gid), current + result * u_power);
	
}
