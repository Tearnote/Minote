#version 460
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D s_source;
layout(binding = 1) restrict writeonly uniform image2D i_target;

#include "util.glsl"

vec3 uncharted2TonemapPartial(vec3 x) {
	
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
	
}

vec3 uncharted2Filmic(vec3 v) {
	
	float exposure_bias = 2.0;
	vec3 curr = uncharted2TonemapPartial(v * exposure_bias);
	
	vec3 W = vec3(8.0);
	vec3 white_scale = vec3(1.0) / uncharted2TonemapPartial(W);
	return curr * white_scale;
	
}

void main() {

	const uvec2 gid = gl_GlobalInvocationID.xy;
	const ivec2 sourceSize = textureSize(s_source, 0);

	if (any(greaterThanEqual(gid, sourceSize)))
		return;

	vec4 sourceTex = texelFetch(s_source, ivec2(gid), 0);
	vec3 mapped = uncharted2Filmic(vec3(sourceTex));
	imageStore(i_target, ivec2(gid), vec4(srgbEncode(mapped), 1.0));
	
}
