#version 460
#pragma shader_stage(compute)

layout(local_size_x = 8, local_size_y = 8) in;

#include "util.glsl"

layout(binding = 0) uniform sampler2D s_source;
layout(binding = 1) restrict writeonly uniform image2D i_target;

layout(constant_id = 0) const uint SourceSizePacked = 0;

const uvec2 SourceSize = U16FROMU32(SourceSizePacked);

#include "util.glsl"

vec3 uchimura(vec3 x, float P, float a, float m, float l, float c, float b) {
	float l0 = ((P - m) * l) / a;
	float L0 = m - m / a;
	float L1 = m + (1.0 - m) / a;
	float S0 = m + l0;
	float S1 = m + a * l0;
	float C2 = (a * P) / (P - S1);
	float CP = -C2 / P;

	vec3 w0 = vec3(1.0 - smoothstep(0.0, m, x));
	vec3 w2 = vec3(step(m + l0, x));
	vec3 w1 = vec3(1.0 - w0 - w2);

	vec3 T = vec3(m * pow(x / m, vec3(c)) + b);
	vec3 S = vec3(P - (P - S1) * exp(CP * (x - S0)));
	vec3 L = vec3(m + a * (x - m));

	return T * w0 + L * w1 + S * w2;
}

vec3 uchimura(vec3 x) {
	const float P = 1.0; // max display brightness
	const float a = 1.0; // contrast
	const float m = 0.16; // linear section start
	const float l = 0.2; // linear section length
	const float c = 1.2; // black
	const float b = 0.0; // pedestal

	return uchimura(x, P, a, m, l, c, b);
}

void main() {
	
	uvec2 gid = gl_GlobalInvocationID.xy;
	
	if (any(greaterThanEqual(gid, SourceSize)))
		return;
	
	vec4 sourceTex = texelFetch(s_source, ivec2(gid), 0);
	vec3 mapped = uchimura(vec3(sourceTex));
	imageStore(i_target, ivec2(gid), vec4(srgbEncode(mapped), 1.0));
	
}
