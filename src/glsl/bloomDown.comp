#version 460
#pragma shader_stage(compute)

layout(local_size_x = 16, local_size_y = 16) in;

#include "util.glsl"

layout(binding = 0) uniform sampler2D s_source;
layout(binding = 1) restrict writeonly uniform image2D i_target;

layout(constant_id = 0) const uint u_sourceSizePacked = 0;
layout(constant_id = 1) const uint u_targetSizePacked = 0;
const uvec2 u_sourceSize = U16FROMU32(u_sourceSizePacked);
const uvec2 u_targetSize = U16FROMU32(u_targetSizePacked);

shared vec4 sh_outer[gl_WorkGroupSize.x + 2][gl_WorkGroupSize.y + 2];
shared vec4 sh_inner[gl_WorkGroupSize.x + 1][gl_WorkGroupSize.y + 1];

void main() {
	
	uvec2 gid = gl_GlobalInvocationID.xy;
	uvec2 lid = gl_LocalInvocationID.xy;
	
	// Fill up the filter tap cache
	
	vec2 uv = (vec2(gid) + vec2(0.5)) / vec2(u_targetSize);
	vec2 texel = vec2(1.0) / vec2(u_sourceSize);
	vec2 texel2 = texel * 2.0;
	
	if (lid.x <= 1)
		sh_outer[lid.x  ][lid.y+2] = textureLod(s_source, uv + vec2(-texel2.x, texel2.y), 0.0);
	if (lid.y <= 1)
		sh_outer[lid.x+2][lid.y  ] = textureLod(s_source, uv + vec2(texel2.x, -texel2.y), 0.0);
	if (lid.x <= 1 && lid.y <= 1)
		sh_outer[lid.x  ][lid.y  ] = textureLod(s_source, uv - texel2, 0.0);
	
	sh_outer[lid.x+2][lid.y+2] = textureLod(s_source, uv + texel2, 0.0);
	
	if (lid.x == 0)
		sh_inner[lid.x  ][lid.y+1] = textureLod(s_source, uv + vec2(-texel.x, texel.y), 0.0);
	if (lid.y == 0)
		sh_inner[lid.x+1][lid.y  ] = textureLod(s_source, uv + vec2(texel.x, -texel.y), 0.0);
	if (lid.x == 0 && lid.y == 0)
		sh_inner[lid.x  ][lid.y  ] = textureLod(s_source, uv - texel, 0.0);
	
	sh_inner[lid.x+1][lid.y+1] = textureLod(s_source, uv + texel, 0.0);
	
	memoryBarrierShared();
	barrier();
	
	if (any(greaterThanEqual(gid, u_targetSize)))
		return; // We can't return before all barriers are passed
	
	// Convolve source texture
	
	vec4 resultInner =
		sh_inner[lid.x  ][lid.y  ] * (4.0 / 32.0) +
		sh_inner[lid.x+1][lid.y  ] * (4.0 / 32.0) +
		sh_inner[lid.x  ][lid.y+1] * (4.0 / 32.0) +
		sh_inner[lid.x+1][lid.y+1] * (4.0 / 32.0);
	vec4 resultOuter =
		sh_outer[lid.x  ][lid.y  ] * (1.0 / 32.0) +
		sh_outer[lid.x+1][lid.y  ] * (2.0 / 32.0) +
		sh_outer[lid.x+2][lid.y  ] * (1.0 / 32.0) +
		sh_outer[lid.x  ][lid.y+1] * (2.0 / 32.0) +
		sh_outer[lid.x+1][lid.y+1] * (4.0 / 32.0) +
		sh_outer[lid.x+2][lid.y+1] * (2.0 / 32.0) +
		sh_outer[lid.x  ][lid.y+2] * (1.0 / 32.0) +
		sh_outer[lid.x+1][lid.y+2] * (2.0 / 32.0) +
		sh_outer[lid.x+2][lid.y+2] * (1.0 / 32.0);
	
	imageStore(i_target, ivec2(gid), resultInner + resultOuter);
	
}
