#version 460
#pragma shader_stage(compute)

layout(local_size_x = 64) in;

#include "types.glsl"

layout(binding = 0) uniform InstanceCount {
	uint u_instanceCount;
};
layout (binding = 1, std430) restrict readonly buffer Instances {
	Instance b_instances[];
};
layout (binding = 2, std430) restrict readonly buffer Colors {
	vec4 b_colors[];
};
layout (binding = 3, std430) restrict readonly buffer Transforms {
	Transform b_transforms[];
};
layout (binding = 4, std430) restrict buffer Commands {
	Command b_commands[];
};
layout(binding = 5, std430) restrict writeonly buffer InstanceCount {
	uint b_instanceCount;
};
layout (binding = 6, std430) restrict writeonly buffer InstancesSorted {
	Instance b_instancesSorted[];
};
layout (binding = 7, std430) restrict writeonly buffer ColorsSorted {
	vec4 b_colorsSorted[];
};
layout (binding = 8, std430) restrict writeonly buffer TransformsSorted {
	Transform b_transformsSorted[];
};

void main() {
	
	uint gid = gl_GlobalInvocationID.x;
	if (gid >= u_instanceCount)
		return;
	
	if (gid == 0)
		b_instanceCount = u_instanceCount;
	
	uint meshIdx = b_instances[gid].meshIdx;
	uint offset = b_commands[meshIdx].firstInstance;
	uint newid = offset + atomicAdd(b_commands[meshIdx].instanceCount, 1);
	
	b_instancesSorted[newid] = b_instances[gid];
	b_colorsSorted[newid] = b_colors[gid];
	b_transformsSorted[newid] = b_transforms[gid];
	
}
